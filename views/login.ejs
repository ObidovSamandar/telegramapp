<%- include('./parts/header.ejs')%>
    <div class="container-fluid p-0" style="height: 45vh  !important;">
        <img src="/imgs/telegram_login.png" class="w-100 h-100" alt="Telegram Desktop">
    </div>
    <div class="container" style="height: 55vh !important; width: 100;">
        <div class="row justify-content-center align-items-center h-100">
            <div class="col-lg-6  h-100vh text-center">
                <h3>Telegram Desktop</h3>
                <p>Welcome to the official Telegram Desktop app. It's fast and secure</p>
                <script async src="https://telegram.org/js/telegram-widget.js?15" data-telegram-login="registerchat_bot" data-size="large" data-auth-url="https://chat-socket-2oo2u.ondigitalocean.app/register" data-request-access="write"></script>
                <!-- <script async src="https://telegram.org/js/telegram-widget.js?15" data-telegram-login="registerchat_bot" data-size="large" data-onauth="onTelegramAuth(user)" data-request-access="write"></script> -->
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4" crossorigin="anonymous"></script>
    <script src="/socket/socket.io.js"></script>
    <script>
         let socket = io.connect()
        const formElement = document.querySelector("#sign-form")
        formElement.addEventListener('submit', event => {
            event.preventDefault()
            
            if(name_form.value.length <= 0){
                name_form.classList.add('border', 'border-danger')
                return 0
            }
            
            name_form.classList.remove('border', 'border-danger')
            
            socket.emit('sign', {
                name: name_form.value
            })
            socket.on('logged', data => {
                name_form.disabled = true
                chat_content.classList.remove('d-none')
                for(let user of data.allusers){
                    const newTrElement = document.createElement('tr')
                    const newTdElement = document.createElement("td")
                    newTdElement.textContent = user.name
                    newTrElement.dataset.userId = user.user_id
                    newTrElement.appendChild(newTdElement)
                    tbody.appendChild(newTrElement)
                    let createUser = document.createElement('option')
                    createUser.dataset.userId = user.chat_id
                    createUser.innerText = user.name
                    createUser.value = user.name
                    alluser.appendChild(createUser)
                }
            })

            socket.on('new_member', data => {
                const newTrElement = document.createElement('tr')
                const newTdElement = document.createElement("td")
                newTdElement.textContent = data.name
                newTrElement.dataset.userId = data.id
                newTrElement.appendChild(newTdElement)
                tbody.appendChild(newTrElement)
                let createUser = document.createElement('option')
                createUser.dataset.userId = data.id
                createUser.innerText = data.name
                createUser.value = data.name
                alluser.appendChild(createUser) 
            })
            socket.on('left_member', data => {
                const element = document.querySelector(`[data-user-id='${data.id}']`)
                if(element){
                    element.remove()
                }
            })
            
        })
        
        
        chat_form.addEventListener('submit', event => {
            event.preventDefault()
            
            if(message_text.value.length <= 0 && message_text.value.length > 256){
                message_text.classList.add('border','border-danger')
                return 0
            }
            
            message_text.classList.remove('border','border-danger')
            
            socket.emit('new_message', {
                message: message_text.value ,
                to: document.getElementById('alluser').options[document.getElementById('alluser').selectedIndex].dataset.userId
            })
            messages.innerHTML = `<li class="my-2">
                <div class="card">
                    <div class="card-header">${name_form.value}</div>
                    <div class="card-body">${message_text.value}</div>
                </div>
            </li>` + messages.innerHTML
            
        })

        socket.on('new_message', data => {
                messages.innerHTML = `<li class="my-2">
                <div class="card">
                    <div class="card-header">${data.owner}</div>
                    <div class="card-body">${data.message}</div>
                </div>
                </li>` + messages.innerHTML
        })
    </script>
<%- include('./parts/footer.ejs') %>

